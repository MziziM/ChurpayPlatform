import React, { useState, useEffect } from 'react';
import { motion } from 'motion/react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Textarea } from './ui/textarea';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Badge } from './ui/badge';
import { Alert, AlertDescription } from './ui/alert';
import { Progress } from './ui/progress';
import { Separator } from './ui/separator';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from './ui/dialog';
import { 
  Upload, 
  FileText, 
  Image, 
  CheckCircle, 
  AlertCircle, 
  X, 
  Building2,
  Mail,
  Phone,
  MapPin,
  User,
  CreditCard,
  Shield,
  Save,
  Edit,
  Info,
  Camera
} from 'lucide-react';
import { useAuth } from './AuthProvider';

interface ChurchProfileData {
  // Basic Information
  churchName: string;
  email: string;
  phone: string;
  website: string;
  
  // Address Information
  streetAddress: string;
  city: string;
  province: string;
  postalCode: string;
  country: string;
  
  // Church Details
  denomination: string;
  membershipSize: string;
  establishedYear: string;
  description: string;
  
  // Contact Person
  contactName: string;
  contactTitle: string;
  contactEmail: string;
  contactPhone: string;
  
  // Banking Information
  bankName: string;
  accountName: string;
  accountNumber: string;
  branchCode: string;
  accountType: string;
  
  // Documents (optional for updates)
  churchLogo: File | null;
}

interface ChurchProfileUpdateProps {
  theme: any;
  isOpen: boolean;
  onClose: () => void;
}

export function ChurchProfileUpdate({ theme, isOpen, onClose }: ChurchProfileUpdateProps) {
  const { user } = useAuth();
  const [formData, setFormData] = useState<ChurchProfileData>({
    churchName: '',
    email: '',
    phone: '',
    website: '',
    streetAddress: '',
    city: '',
    province: '',
    postalCode: '',
    country: 'South Africa',
    denomination: '',
    membershipSize: '',
    establishedYear: '',
    description: '',
    contactName: '',
    contactTitle: '',
    contactEmail: '',
    contactPhone: '',
    bankName: '',
    accountName: '',
    accountNumber: '',
    branchCode: '',
    accountType: 'Current Account',
    churchLogo: null
  });

  const [activeTab, setActiveTab] = useState('basic');
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [uploadProgress, setUploadProgress] = useState<number>(0);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);

  const provinces = [
    'Eastern Cape', 'Free State', 'Gauteng', 'KwaZulu-Natal',
    'Limpopo', 'Mpumalanga', 'Northern Cape', 'North West', 'Western Cape'
  ];

  const denominations = [
    'Anglican', 'Baptist', 'Catholic', 'Charismatic', 'Lutheran',
    'Methodist', 'Pentecostal', 'Presbyterian', 'Reformed', 'Other'
  ];

  const membershipSizes = [
    '1-50', '51-100', '101-250', '251-500', '501-1000', '1000+'
  ];

  const accountTypes = [
    'Current Account', 'Savings Account', 'Business Account'
  ];

  // Load existing church data on component mount
  useEffect(() => {
    if (user && isOpen) {
      // In real app, this would fetch from backend API
      const existingData = {
        churchName: user.church_name || '',
        email: user.church_email || user.email || '',
        phone: user.church_phone || '',
        website: user.church_website || '',
        streetAddress: user.church_address || '',
        city: user.church_city || '',
        province: user.church_province || '',
        postalCode: user.church_postal_code || '',
        country: user.church_country || 'South Africa',
        denomination: user.denomination || '',
        membershipSize: user.membership_size || '',
        establishedYear: user.church_established || '',
        description: user.church_description || '',
        contactName: user.pastor_name || user.contact_name || '',
        contactTitle: user.pastor_title || user.contact_title || '',
        contactEmail: user.pastor_email || user.contact_email || '',
        contactPhone: user.pastor_phone || user.contact_phone || '',
        bankName: user.bank_name || '',
        accountName: user.account_name || '',
        accountNumber: user.account_number || '',
        branchCode: user.branch_code || '',
        accountType: user.account_type || 'Current Account',
        churchLogo: null
      };
      setFormData(existingData);
    }
  }, [user, isOpen]);

  const handleInputChange = (field: keyof ChurchProfileData, value: string | boolean) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    setHasUnsavedChanges(true);
    
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const handleFileUpload = (file: File) => {
    // Validate file type
    if (!file.type.startsWith('image/')) {
      setErrors(prev => ({ ...prev, churchLogo: 'Please upload an image file (PNG, JPG, etc.)' }));
      return;
    }
    if (file.size > 5 * 1024 * 1024) { // 5MB
      setErrors(prev => ({ ...prev, churchLogo: 'Image file size must be less than 5MB' }));
      return;
    }

    // Simulate upload progress
    setUploadProgress(0);
    const interval = setInterval(() => {
      setUploadProgress(prev => {
        const newProgress = prev + 20;
        if (newProgress >= 100) {
          clearInterval(interval);
          setFormData(prevData => ({ ...prevData, churchLogo: file }));
          setHasUnsavedChanges(true);
          return 100;
        }
        return newProgress;
      });
    }, 200);

    // Clear any existing errors
    setErrors(prev => ({ ...prev, churchLogo: '' }));
  };

  const removeFile = () => {
    setFormData(prev => ({ ...prev, churchLogo: null }));
    setUploadProgress(0);
    setHasUnsavedChanges(true);
  };

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    // Basic validation
    if (!formData.churchName.trim()) newErrors.churchName = 'Church name is required';
    if (!formData.email.trim()) newErrors.email = 'Email is required';
    if (!formData.phone.trim()) newErrors.phone = 'Phone number is required';
    if (!formData.streetAddress.trim()) newErrors.streetAddress = 'Street address is required';
    if (!formData.city.trim()) newErrors.city = 'City is required';
    if (!formData.province) newErrors.province = 'Province is required';
    if (!formData.postalCode.trim()) newErrors.postalCode = 'Postal code is required';
    if (!formData.contactName.trim()) newErrors.contactName = 'Contact name is required';
    if (!formData.contactTitle.trim()) newErrors.contactTitle = 'Contact title is required';
    if (!formData.contactEmail.trim()) newErrors.contactEmail = 'Contact email is required';
    if (!formData.contactPhone.trim()) newErrors.contactPhone = 'Contact phone is required';
    if (!formData.denomination) newErrors.denomination = 'Denomination is required';
    if (!formData.membershipSize) newErrors.membershipSize = 'Membership size is required';

    // Email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (formData.email && !emailRegex.test(formData.email)) {
      newErrors.email = 'Please enter a valid email address';
    }
    if (formData.contactEmail && !emailRegex.test(formData.contactEmail)) {
      newErrors.contactEmail = 'Please enter a valid email address';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSave = async () => {
    if (!validateForm()) return;

    setIsSubmitting(true);
    try {
      // Simulate API call to update church profile
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // In real app, this would make API call to backend
      console.log('Church profile updated:', formData);
      
      alert('Church profile updated successfully!');
      setHasUnsavedChanges(false);
      onClose();
    } catch (error) {
      console.error('Error updating profile:', error);
      alert('Error updating profile. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const tabs = [
    { id: 'basic', label: 'Basic Info', icon: Building2 },
    { id: 'contact', label: 'Contact', icon: User },
    { id: 'banking', label: 'Banking', icon: CreditCard },
    { id: 'logo', label: 'Logo', icon: Camera }
  ];

  const renderBasicInfo = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="space-y-2">
          <label className="block font-medium" style={{ color: theme.text }}>
            Church Name <span className="text-red-500">*</span>
          </label>
          <Input
            value={formData.churchName}
            onChange={(e) => handleInputChange('churchName', e.target.value)}
            placeholder="Enter church name"
            className={errors.churchName ? 'border-red-500' : ''}
          />
          {errors.churchName && <p className="text-sm text-red-500">{errors.churchName}</p>}
        </div>

        <div className="space-y-2">
          <label className="block font-medium" style={{ color: theme.text }}>
            Email Address <span className="text-red-500">*</span>
          </label>
          <Input
            type="email"
            value={formData.email}
            onChange={(e) => handleInputChange('email', e.target.value)}
            placeholder="church@example.com"
            className={errors.email ? 'border-red-500' : ''}
          />
          {errors.email && <p className="text-sm text-red-500">{errors.email}</p>}
        </div>

        <div className="space-y-2">
          <label className="block font-medium" style={{ color: theme.text }}>
            Phone Number <span className="text-red-500">*</span>
          </label>
          <Input
            value={formData.phone}
            onChange={(e) => handleInputChange('phone', e.target.value)}
            placeholder="+27 11 123 4567"
            className={errors.phone ? 'border-red-500' : ''}
          />
          {errors.phone && <p className="text-sm text-red-500">{errors.phone}</p>}
        </div>

        <div className="space-y-2">
          <label className="block font-medium" style={{ color: theme.text }}>
            Website
          </label>
          <Input
            value={formData.website}
            onChange={(e) => handleInputChange('website', e.target.value)}
            placeholder="https://www.churchname.com"
          />
        </div>
      </div>

      <Separator />

      <div className="space-y-4">
        <h3 className="font-semibold" style={{ color: theme.text }}>Church Address</h3>
        
        <div className="space-y-2">
          <label className="block font-medium" style={{ color: theme.text }}>
            Street Address <span className="text-red-500">*</span>
          </label>
          <Input
            value={formData.streetAddress}
            onChange={(e) => handleInputChange('streetAddress', e.target.value)}
            placeholder="123 Main Street"
            className={errors.streetAddress ? 'border-red-500' : ''}
          />
          {errors.streetAddress && <p className="text-sm text-red-500">{errors.streetAddress}</p>}
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="space-y-2">
            <label className="block font-medium" style={{ color: theme.text }}>
              City <span className="text-red-500">*</span>
            </label>
            <Input
              value={formData.city}
              onChange={(e) => handleInputChange('city', e.target.value)}
              placeholder="Johannesburg"
              className={errors.city ? 'border-red-500' : ''}
            />
            {errors.city && <p className="text-sm text-red-500">{errors.city}</p>}
          </div>

          <div className="space-y-2">
            <label className="block font-medium" style={{ color: theme.text }}>
              Province <span className="text-red-500">*</span>
            </label>
            <select
              value={formData.province}
              onChange={(e) => handleInputChange('province', e.target.value)}
              className={`w-full px-3 py-2 rounded-md border ${errors.province ? 'border-red-500' : ''}`}
              style={{ backgroundColor: theme.card, borderColor: theme.border, color: theme.text }}
            >
              <option value="">Select Province</option>
              {provinces.map(province => (
                <option key={province} value={province}>{province}</option>
              ))}
            </select>
            {errors.province && <p className="text-sm text-red-500">{errors.province}</p>}
          </div>

          <div className="space-y-2">
            <label className="block font-medium" style={{ color: theme.text }}>
              Postal Code <span className="text-red-500">*</span>
            </label>
            <Input
              value={formData.postalCode}
              onChange={(e) => handleInputChange('postalCode', e.target.value)}
              placeholder="2000"
              className={errors.postalCode ? 'border-red-500' : ''}
            />
            {errors.postalCode && <p className="text-sm text-red-500">{errors.postalCode}</p>}
          </div>
        </div>
      </div>

      <Separator />

      <div className="space-y-4">
        <h3 className="font-semibold" style={{ color: theme.text }}>Church Information</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <label className="block font-medium" style={{ color: theme.text }}>
              Denomination <span className="text-red-500">*</span>
            </label>
            <select
              value={formData.denomination}
              onChange={(e) => handleInputChange('denomination', e.target.value)}
              className={`w-full px-3 py-2 rounded-md border ${errors.denomination ? 'border-red-500' : ''}`}
              style={{ backgroundColor: theme.card, borderColor: theme.border, color: theme.text }}
            >
              <option value="">Select Denomination</option>
              {denominations.map(denom => (
                <option key={denom} value={denom}>{denom}</option>
              ))}
            </select>
            {errors.denomination && <p className="text-sm text-red-500">{errors.denomination}</p>}
          </div>

          <div className="space-y-2">
            <label className="block font-medium" style={{ color: theme.text }}>
              Membership Size <span className="text-red-500">*</span>
            </label>
            <select
              value={formData.membershipSize}
              onChange={(e) => handleInputChange('membershipSize', e.target.value)}
              className={`w-full px-3 py-2 rounded-md border ${errors.membershipSize ? 'border-red-500' : ''}`}
              style={{ backgroundColor: theme.card, borderColor: theme.border, color: theme.text }}
            >
              <option value="">Select Size</option>
              {membershipSizes.map(size => (
                <option key={size} value={size}>{size} members</option>
              ))}
            </select>
            {errors.membershipSize && <p className="text-sm text-red-500">{errors.membershipSize}</p>}
          </div>

          <div className="space-y-2">
            <label className="block font-medium" style={{ color: theme.text }}>
              Established Year
            </label>
            <Input
              type="number"
              value={formData.establishedYear}
              onChange={(e) => handleInputChange('establishedYear', e.target.value)}
              placeholder="1995"
              min="1800"
              max={new Date().getFullYear()}
            />
          </div>
        </div>

        <div className="space-y-2">
          <label className="block font-medium" style={{ color: theme.text }}>
            Church Description
          </label>
          <Textarea
            value={formData.description}
            onChange={(e) => handleInputChange('description', e.target.value)}
            placeholder="Brief description of your church, mission, and activities..."
            rows={4}
          />
        </div>
      </div>
    </div>
  );

  const renderContactInfo = () => (
    <div className="space-y-6">
      <div className="space-y-4">
        <h3 className="font-semibold" style={{ color: theme.text }}>Primary Contact Person</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <label className="block font-medium" style={{ color: theme.text }}>
              Full Name <span className="text-red-500">*</span>
            </label>
            <Input
              value={formData.contactName}
              onChange={(e) => handleInputChange('contactName', e.target.value)}
              placeholder="Pastor John Smith"
              className={errors.contactName ? 'border-red-500' : ''}
            />
            {errors.contactName && <p className="text-sm text-red-500">{errors.contactName}</p>}
          </div>

          <div className="space-y-2">
            <label className="block font-medium" style={{ color: theme.text }}>
              Title/Position <span className="text-red-500">*</span>
            </label>
            <Input
              value={formData.contactTitle}
              onChange={(e) => handleInputChange('contactTitle', e.target.value)}
              placeholder="Senior Pastor"
              className={errors.contactTitle ? 'border-red-500' : ''}
            />
            {errors.contactTitle && <p className="text-sm text-red-500">{errors.contactTitle}</p>}
          </div>

          <div className="space-y-2">
            <label className="block font-medium" style={{ color: theme.text }}>
              Email Address <span className="text-red-500">*</span>
            </label>
            <Input
              type="email"
              value={formData.contactEmail}
              onChange={(e) => handleInputChange('contactEmail', e.target.value)}
              placeholder="pastor@church.com"
              className={errors.contactEmail ? 'border-red-500' : ''}
            />
            {errors.contactEmail && <p className="text-sm text-red-500">{errors.contactEmail}</p>}
          </div>

          <div className="space-y-2">
            <label className="block font-medium" style={{ color: theme.text }}>
              Phone Number <span className="text-red-500">*</span>
            </label>
            <Input
              value={formData.contactPhone}
              onChange={(e) => handleInputChange('contactPhone', e.target.value)}
              placeholder="+27 82 123 4567"
              className={errors.contactPhone ? 'border-red-500' : ''}
            />
            {errors.contactPhone && <p className="text-sm text-red-500">{errors.contactPhone}</p>}
          </div>
        </div>
      </div>
    </div>
  );

  const renderBankingInfo = () => (
    <div className="space-y-6">
      <Alert>
        <Shield className="h-4 w-4" />
        <AlertDescription>
          Your banking information is encrypted and securely stored. This information is used for receiving donations and payments through ChurPay.
        </AlertDescription>
      </Alert>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="space-y-2">
          <label className="block font-medium" style={{ color: theme.text }}>
            Bank Name
          </label>
          <Input
            value={formData.bankName}
            onChange={(e) => handleInputChange('bankName', e.target.value)}
            placeholder="Standard Bank"
          />
        </div>

        <div className="space-y-2">
          <label className="block font-medium" style={{ color: theme.text }}>
            Account Name
          </label>
          <Input
            value={formData.accountName}
            onChange={(e) => handleInputChange('accountName', e.target.value)}
            placeholder="Church Name"
          />
        </div>

        <div className="space-y-2">
          <label className="block font-medium" style={{ color: theme.text }}>
            Account Number
          </label>
          <Input
            value={formData.accountNumber}
            onChange={(e) => handleInputChange('accountNumber', e.target.value)}
            placeholder="1234567890"
          />
        </div>

        <div className="space-y-2">
          <label className="block font-medium" style={{ color: theme.text }}>
            Branch Code
          </label>
          <Input
            value={formData.branchCode}
            onChange={(e) => handleInputChange('branchCode', e.target.value)}
            placeholder="123456"
          />
        </div>

        <div className="space-y-2">
          <label className="block font-medium" style={{ color: theme.text }}>
            Account Type
          </label>
          <select
            value={formData.accountType}
            onChange={(e) => handleInputChange('accountType', e.target.value)}
            className="w-full px-3 py-2 rounded-md border"
            style={{ backgroundColor: theme.card, borderColor: theme.border, color: theme.text }}
          >
            {accountTypes.map(type => (
              <option key={type} value={type}>{type}</option>
            ))}
          </select>
        </div>
      </div>
    </div>
  );

  const renderLogoUpload = () => (
    <div className="space-y-6">
      <div className="space-y-4">
        <h3 className="font-semibold" style={{ color: theme.text }}>Church Logo</h3>
        <p className="text-sm" style={{ color: theme.textSecondary }}>
          Upload your church logo. This will be displayed in your church profile and on member receipts.
        </p>
        
        {!formData.churchLogo ? (
          <div 
            className="border-2 border-dashed rounded-lg p-8 text-center transition-colors hover:border-purple-400"
            style={{ borderColor: theme.border }}
          >
            <input
              type="file"
              accept="image/*"
              onChange={(e) => {
                const selectedFile = e.target.files?.[0];
                if (selectedFile) {
                  handleFileUpload(selectedFile);
                }
              }}
              className="hidden"
              id="upload-logo"
            />
            <label 
              htmlFor="upload-logo" 
              className="cursor-pointer flex flex-col items-center space-y-3"
            >
              <Camera className="w-12 h-12" style={{ color: theme.textSecondary }} />
              <div>
                <span className="font-medium" style={{ color: theme.text }}>Click to upload church logo</span>
                <p className="text-sm mt-1" style={{ color: theme.textSecondary }}>
                  PNG, JPG, GIF up to 5MB
                </p>
              </div>
            </label>
          </div>
        ) : uploadProgress < 100 ? (
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <span className="text-sm" style={{ color: theme.text }}>Uploading logo...</span>
              <span className="text-sm" style={{ color: theme.textSecondary }}>{uploadProgress}%</span>
            </div>
            <Progress value={uploadProgress} className="w-full" />
          </div>
        ) : (
          <div 
            className="flex items-center justify-between p-4 rounded-lg border"
            style={{ backgroundColor: theme.accent, borderColor: theme.border }}
          >
            <div className="flex items-center space-x-3">
              <Image className="w-6 h-6 text-green-500" />
              <div>
                <p className="font-medium" style={{ color: theme.text }}>{formData.churchLogo.name}</p>
                <p className="text-sm" style={{ color: theme.textSecondary }}>
                  {(formData.churchLogo.size / 1024 / 1024).toFixed(2)} MB
                </p>
              </div>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={removeFile}
              className="text-red-500 hover:text-red-700"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
        )}
        
        {errors.churchLogo && (
          <p className="text-sm text-red-500 flex items-center space-x-1">
            <AlertCircle className="w-4 h-4" />
            <span>{errors.churchLogo}</span>
          </p>
        )}
      </div>
    </div>
  );

  const renderTabContent = () => {
    switch (activeTab) {
      case 'basic':
        return renderBasicInfo();
      case 'contact':
        return renderContactInfo();
      case 'banking':
        return renderBankingInfo();
      case 'logo':
        return renderLogoUpload();
      default:
        return renderBasicInfo();
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-4xl max-h-[90vh] overflow-y-auto" style={{ backgroundColor: theme.card }}>
        <DialogHeader>
          <DialogTitle style={{ color: theme.text }}>
            <div className="flex items-center space-x-2">
              <Edit className="w-5 h-5 text-purple-600" />
              <span>Update Church Profile</span>
            </div>
          </DialogTitle>
          <DialogDescription style={{ color: theme.textSecondary }}>
            Update your church information, contact details, and banking information.
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6">
          {/* Tab Navigation */}
          <div className="border-b" style={{ borderColor: theme.border }}>
            <nav className="flex space-x-8">
              {tabs.map((tab) => {
                const IconComponent = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${
                      activeTab === tab.id
                        ? 'border-purple-500 text-purple-600'
                        : 'border-transparent hover:border-gray-300'
                    }`}
                    style={{ 
                      color: activeTab === tab.id ? '#7636A6' : theme.textSecondary 
                    }}
                  >
                    <IconComponent className="w-4 h-4" />
                    <span>{tab.label}</span>
                  </button>
                );
              })}
            </nav>
          </div>

          {/* Tab Content */}
          <div className="min-h-[400px]">
            {renderTabContent()}
          </div>

          {/* Unsaved Changes Alert */}
          {hasUnsavedChanges && (
            <Alert>
              <Info className="h-4 w-4" />
              <AlertDescription>
                You have unsaved changes. Don't forget to save your updates.
              </AlertDescription>
            </Alert>
          )}

          {/* Action Buttons */}
          <div className="flex space-x-3 pt-4 border-t" style={{ borderColor: theme.border }}>
            <Button
              variant="outline"
              onClick={onClose}
              className="flex-1"
              disabled={isSubmitting}
            >
              Cancel
            </Button>
            <Button
              onClick={handleSave}
              className="flex-1 bg-purple-600 hover:bg-purple-700 text-white"
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                  Saving...
                </>
              ) : (
                <>
                  <Save className="w-4 h-4 mr-2" />
                  Save Changes
                </>
              )}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}